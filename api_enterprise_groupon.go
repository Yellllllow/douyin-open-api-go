/*
 * 抖音开放API
 *
 * douyin open api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package douyin

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// EnterpriseGrouponApiService EnterpriseGrouponApi service
type EnterpriseGrouponApiService service

// EnterpriseGrouponDetailOpts Optional parameters for the method 'EnterpriseGrouponDetail'
type EnterpriseGrouponDetailOpts struct {
	GrouponIds optional.Interface
}

/*
EnterpriseGrouponDetail 团购活动详情
团购活动详情
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accessToken 调用/oauth/access_token/生成的token，此token需要用户授权。
 * @param openId 通过/oauth/access_token/获取，用户唯一标志
 * @param optional nil or *EnterpriseGrouponDetailOpts - Optional Parameters:
 * @param "GrouponIds" (optional.Interface of []string) -  团购活动的Id
@return EnterpriseGrouponDetailRsp
*/
func (a *EnterpriseGrouponApiService) EnterpriseGrouponDetail(ctx _context.Context, accessToken string, openId string, localVarOptionals *EnterpriseGrouponDetailOpts) (EnterpriseGrouponDetailRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EnterpriseGrouponDetailRsp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/enterprise/groupon/detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("access_token", parameterToString(accessToken, ""))
	localVarQueryParams.Add("open_id", parameterToString(openId, ""))
	if localVarOptionals != nil && localVarOptionals.GrouponIds.IsSet() {
		localVarQueryParams.Add("groupon_ids", parameterToString(localVarOptionals.GrouponIds.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// EnterpriseGrouponListOpts Optional parameters for the method 'EnterpriseGrouponList'
type EnterpriseGrouponListOpts struct {
	Cursor optional.Int64
	Status optional.Int64
}

/*
EnterpriseGrouponList 团购活动列表
团购活动列表
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accessToken 调用/oauth/access_token/生成的token，此token需要用户授权。
 * @param openId 通过/oauth/access_token/获取，用户唯一标志
 * @param count 每页数量
 * @param optional nil or *EnterpriseGrouponListOpts - Optional Parameters:
 * @param "Cursor" (optional.Int64) -  分页游标, 第一页请求cursor是0, response中会返回下一页请求用到的cursor, 同时response还会返回has_more来表明是否有更多的数据。
 * @param "Status" (optional.Int64) -  状态筛选 1 有效 2 审核中 3 审核失败 4 中止
@return EnterpriseGrouponListRsp
*/
func (a *EnterpriseGrouponApiService) EnterpriseGrouponList(ctx _context.Context, accessToken string, openId string, count int64, localVarOptionals *EnterpriseGrouponListOpts) (EnterpriseGrouponListRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EnterpriseGrouponListRsp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/enterprise/groupon/list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("access_token", parameterToString(accessToken, ""))
	localVarQueryParams.Add("open_id", parameterToString(openId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// EnterpriseGrouponOfflineOpts Optional parameters for the method 'EnterpriseGrouponOffline'
type EnterpriseGrouponOfflineOpts struct {
	GrouponId optional.String
}

/*
EnterpriseGrouponOffline 团购活动下线
团购活动下线
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accessToken 调用/oauth/access_token/生成的token，此token需要用户授权。
 * @param openId 通过/oauth/access_token/获取，用户唯一标志
 * @param optional nil or *EnterpriseGrouponOfflineOpts - Optional Parameters:
 * @param "GrouponId" (optional.String) -  团购活动Id
@return EnterpriseGrouponOfflineRsp
*/
func (a *EnterpriseGrouponApiService) EnterpriseGrouponOffline(ctx _context.Context, accessToken string, openId string, localVarOptionals *EnterpriseGrouponOfflineOpts) (EnterpriseGrouponOfflineRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EnterpriseGrouponOfflineRsp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/enterprise/groupon/offline"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("access_token", parameterToString(accessToken, ""))
	localVarQueryParams.Add("open_id", parameterToString(openId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.GrouponId.IsSet() {
		localVarFormParams.Add("groupon_id", parameterToString(localVarOptionals.GrouponId.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// EnterpriseGrouponSaveOpts Optional parameters for the method 'EnterpriseGrouponSave'
type EnterpriseGrouponSaveOpts struct {
	ActualAmount   optional.Int64
	CodeType       optional.Int64
	H5Url          optional.String
	OrderLimit     optional.Int64
	AuditMsg       optional.String
	GrouponId      optional.String
	StartTime      optional.Int64
	Stock          optional.Int64
	Title          optional.String
	EndTime        optional.Int64
	MerchantName   optional.String
	ServiceNumber  optional.String
	Status         optional.Int64
	Notification   optional.String
	OriginalAmount optional.Int64
	SoldCount      optional.Int64
	UseType        optional.Int64
	GrouponGoods   optional.Interface
	CoverImages    optional.Interface
	PoiIds         optional.Interface
}

/*
EnterpriseGrouponSave 创建团购活动
创建团购活动
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accessToken 调用/oauth/access_token/生成的token，此token需要用户授权。
 * @param openId 通过/oauth/access_token/获取，用户唯一标志
 * @param optional nil or *EnterpriseGrouponSaveOpts - Optional Parameters:
 * @param "ActualAmount" (optional.Int64) -  实际金额(单位分)
 * @param "CodeType" (optional.Int64) -  0券码生成的方式;1系统生成;2自定义上传
 * @param "H5Url" (optional.String) -  团购活动详情页链接
 * @param "OrderLimit" (optional.Int64) -  单用户购买数量上限
 * @param "AuditMsg" (optional.String) -  审核失败原因
 * @param "GrouponId" (optional.String) -  团购活动Id，审核失败修改用
 * @param "StartTime" (optional.Int64) -  活动开始时间 unix time
 * @param "Stock" (optional.Int64) -  团购活动库存总数
 * @param "Title" (optional.String) -  卡券标题
 * @param "EndTime" (optional.Int64) -  活动截止时间 unix time
 * @param "MerchantName" (optional.String) -  商户名称
 * @param "ServiceNumber" (optional.String) -  联系电话
 * @param "Status" (optional.Int64) -  活动状态 创建时可以忽略 1有效 2审核中 3审核失败 4中止
 * @param "Notification" (optional.String) -  团购须知
 * @param "OriginalAmount" (optional.Int64) -  原价(单位分)
 * @param "SoldCount" (optional.Int64) -  已售出数量
 * @param "UseType" (optional.Int64) -  团购使用方式 1 到店核销
 * @param "GrouponGoods" (optional.Interface of []EnterpriseGrouponSaveGrouponGoods) -  团购商品
 * @param "CoverImages" (optional.Interface of []string) -  封面图
 * @param "PoiIds" (optional.Interface of []string) -  绑定的POI 列表 默认展示全部门店
@return EnterpriseGrouponSaveRsp
*/
func (a *EnterpriseGrouponApiService) EnterpriseGrouponSave(ctx _context.Context, accessToken string, openId string, localVarOptionals *EnterpriseGrouponSaveOpts) (EnterpriseGrouponSaveRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EnterpriseGrouponSaveRsp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/enterprise/groupon/save"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("access_token", parameterToString(accessToken, ""))
	localVarQueryParams.Add("open_id", parameterToString(openId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.ActualAmount.IsSet() {
		localVarFormParams.Add("actual_amount", parameterToString(localVarOptionals.ActualAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CodeType.IsSet() {
		localVarFormParams.Add("code_type", parameterToString(localVarOptionals.CodeType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.H5Url.IsSet() {
		localVarFormParams.Add("h5_url", parameterToString(localVarOptionals.H5Url.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderLimit.IsSet() {
		localVarFormParams.Add("order_limit", parameterToString(localVarOptionals.OrderLimit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AuditMsg.IsSet() {
		localVarFormParams.Add("audit_msg", parameterToString(localVarOptionals.AuditMsg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrouponId.IsSet() {
		localVarFormParams.Add("groupon_id", parameterToString(localVarOptionals.GrouponId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarFormParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Stock.IsSet() {
		localVarFormParams.Add("stock", parameterToString(localVarOptionals.Stock.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Title.IsSet() {
		localVarFormParams.Add("title", parameterToString(localVarOptionals.Title.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EndTime.IsSet() {
		localVarFormParams.Add("end_time", parameterToString(localVarOptionals.EndTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MerchantName.IsSet() {
		localVarFormParams.Add("merchant_name", parameterToString(localVarOptionals.MerchantName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ServiceNumber.IsSet() {
		localVarFormParams.Add("service_number", parameterToString(localVarOptionals.ServiceNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarFormParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Notification.IsSet() {
		localVarFormParams.Add("notification", parameterToString(localVarOptionals.Notification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OriginalAmount.IsSet() {
		localVarFormParams.Add("original_amount", parameterToString(localVarOptionals.OriginalAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SoldCount.IsSet() {
		localVarFormParams.Add("sold_count", parameterToString(localVarOptionals.SoldCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseType.IsSet() {
		localVarFormParams.Add("use_type", parameterToString(localVarOptionals.UseType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GrouponGoods.IsSet() {
		paramJson, err := parameterToJson(localVarOptionals.GrouponGoods.Value())
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("groupon_goods", paramJson)
	}
	if localVarOptionals != nil && localVarOptionals.CoverImages.IsSet() {
		localVarFormParams.Add("cover_images", parameterToString(localVarOptionals.CoverImages.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.PoiIds.IsSet() {
		localVarFormParams.Add("poi_ids", parameterToString(localVarOptionals.PoiIds.Value(), "csv"))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
