/*
 * 抖音开放API
 *
 * douyin open api
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package douyin

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SpuApiService SpuApi service
type SpuApiService service

/*
PoiSpuQuery 查询SPU
查询SPU
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accessToken 调用/oauth/access_token/生成的token，此token需要用户授权。
 * @param spuExtId
@return PoiSpuQueryRsp
*/
func (a *SpuApiService) PoiSpuQuery(ctx _context.Context, accessToken string, spuExtId string) (PoiSpuQueryRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PoiSpuQueryRsp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/poi/spu/query"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("access_token", parameterToString(accessToken, ""))
	localVarQueryParams.Add("spu_ext_id", parameterToString(spuExtId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// PoiSpuSyncOpts Optional parameters for the method 'PoiSpuSync'
type PoiSpuSyncOpts struct {
	Description   optional.String
	Name          optional.String
	Order         optional.Int64
	SpuExtId      optional.String
	SpuType       optional.Int64
	Status        optional.Int64
	SupplierExtId optional.String
	Attributes    optional.Interface
}

/*
PoiSpuSync SPU同步
SPU同步
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accessToken 调用/oauth/access_token/生成的token，此token需要用户授权。
 * @param optional nil or *PoiSpuSyncOpts - Optional Parameters:
 * @param "Description" (optional.String) -  SPU描述
 * @param "Name" (optional.String) -  SPU名称
 * @param "Order" (optional.Int64) -  SPU展示顺序,降序
 * @param "SpuExtId" (optional.String) -  接入方SPU ID
 * @param "SpuType" (optional.Int64) -  spu类型号，1-酒店民宿房型，90-景区门票，91-团购券 20 电商实体商品 21 电商虚拟商品
 * @param "Status" (optional.Int64) -  在线状态 1 - 在线; 2 - 下线
 * @param "SupplierExtId" (optional.String) -  接入方店铺ID
 * @param "Attributes" (optional.Interface of PoiSupplier) -
@return PoiSpuSyncRsp
*/
func (a *SpuApiService) PoiSpuSync(ctx _context.Context, accessToken string, localVarOptionals *PoiSpuSyncOpts) (PoiSpuSyncRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PoiSpuSyncRsp
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/poi/spu/sync"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("access_token", parameterToString(accessToken, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Description.IsSet() {
		localVarFormParams.Add("description", parameterToString(localVarOptionals.Description.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Order.IsSet() {
		localVarFormParams.Add("order", parameterToString(localVarOptionals.Order.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpuExtId.IsSet() {
		localVarFormParams.Add("spu_ext_id", parameterToString(localVarOptionals.SpuExtId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SpuType.IsSet() {
		localVarFormParams.Add("spu_type", parameterToString(localVarOptionals.SpuType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarFormParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SupplierExtId.IsSet() {
		localVarFormParams.Add("supplier_ext_id", parameterToString(localVarOptionals.SupplierExtId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Attributes.IsSet() {
		paramJson, err := parameterToJson(localVarOptionals.Attributes.Value())
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("attributes", paramJson)
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
